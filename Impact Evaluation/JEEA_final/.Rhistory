set.seed(2025)
n <- 100
u_i <- rnorm(n, mean = 0, sd = sqrt(5))
g_i <- rgamma(n, shape = 2, scale = 2)
r_i <- rbinom(n, size = 1, prob = 0.5)
x_star_i <- numeric(n)
for (i in 1:n) {
if (r_i[i] == 1) {
x_star_i[i] <- rgamma(1, shape = 3, scale = 1)
} else {
x_star_i[i] <- rgamma(1, shape = 7, scale = 1)
}
}
beta_0 <- 400
beta_1 <- 5
beta_2 <- 200
beta_3 <- 10
y_i <- beta_0 + beta_1 * x_star_i + beta_2 * r_i + beta_3 * g_i + u_i
n_i <- rnorm(n, mean = 10, sd = sqrt(3))
b_i <- rnorm(n, mean = 5 + sqrt(x_star_i), sd = sqrt(3))
data <- data.frame(y = y_i, x_star = x_star_i, r = r_i, g = g_i, n = n_i, b = b_i)
reg1 <- lm(y ~ x_star, data = data)
reg2 <- lm(y ~ x_star + r, data = data)
reg3 <- lm(y ~ x_star + r + g, data = data)
reg4 <- lm(y ~ x_star + r + n, data = data)
reg5 <- lm(y ~ x_star + r + b, data = data)
summary_reg1 <- summary(reg1)
summary_reg2 <- summary(reg2)
summary_reg3 <- summary(reg3)
summary_reg4 <- summary(reg4)
summary_reg5 <- summary(reg5)
extract_results <- function(reg_summary, reg_name) {
beta1_estimate <- reg_summary$coefficients["x_star", "Estimate"]
beta1_se <- reg_summary$coefficients["x_star", "Std. Error"]
beta1_true <- 5
cat(paste0("\n", reg_name, ":\n"))
cat(paste0(" Estimated beta_1: ", round(beta1_estimate, 4), "\n"))
cat(paste0(" True beta_1: ", beta1_true, "\n"))
cat(paste0(" Standard Error: ", round(beta1_se, 4), "\n"))
cat(paste0(" Difference from true value: ", round(beta1_estimate - beta1_true, 4), "\n"))
cat(paste0(" Adjusted R^2: ", round(reg_summary$adj.r.squared, 4), "\n"))
}
extract_results(summary_reg1, "Regression 1 (y ~ x_star)")
extract_results(summary_reg2, "Regression 2 (y ~ x_star + r)")
extract_results(summary_reg3, "Regression 3 (y ~ x_star + r + g)")
extract_results(summary_reg4, "Regression 4 (y ~ x_star + r + n)")
extract_results(summary_reg5, "Regression 5 (y ~ x_star + r + b)")
M <- 100
n <- 100
beta_0 <- 400
beta_1 <- 5
beta_2 <- 200
beta_3 <- 10
sigma_u <- sqrt(5)
beta1_estimates <- matrix(NA, nrow = M, ncol = 5)
colnames(beta1_estimates) <- c("Reg1", "Reg2", "Reg3", "Reg4", "Reg5")
for (m in 1:M) {
# Generate data
u_i <- rnorm(n, mean = 0, sd = sigma_u)
g_i <- rgamma(n, shape = 2, scale = 2)
r_i <- rbinom(n, size = 1, prob = 0.5)
x_star_i <- ifelse(r_i == 1, rgamma(n, shape = 3, scale = 1), rgamma(n, shape = 7, scale = 1))
y_i <- beta_0 + beta_1 * x_star_i + beta_2 * r_i + beta_3 * g_i + u_i
n_i <- rnorm(n, mean = 10, sd = sqrt(3))
b_i <- rnorm(n, mean = 5 + sqrt(x_star_i), sd = sqrt(3))
data <- data.frame(y = y_i, x_star = x_star_i, r = r_i, g = g_i, n = n_i, b = b_i)
beta1_estimates[m, 1] <- coef(lm(y ~ x_star, data = data))["x_star"]
beta1_estimates[m, 2] <- coef(lm(y ~ x_star + r, data = data))["x_star"]
beta1_estimates[m, 3] <- coef(lm(y ~ x_star + r + g, data = data))["x_star"]
beta1_estimates[m, 4] <- coef(lm(y ~ x_star + r + n, data = data))["x_star"]
beta1_estimates[m, 5] <- coef(lm(y ~ x_star + r + b, data = data))["x_star"]
}
beta1_df <- data.frame(beta1_estimates)
summary_results <- data.frame(
Regression = colnames(beta1_estimates),
Mean_Estimate = colMeans(beta1_estimates),
SD = apply(beta1_estimates, 2, sd),
Bias = colMeans(beta1_estimates) - beta_1
)
print(summary_results)
par(mfrow = c(1, 5))
titles <- c("y ~ x*", "y ~ x* + r", "y ~ x* + r + g", "y ~ x* + r + n", "y ~ x* + r + b")
for (i in 1:5) {
hist(beta1_df[[i]], main = titles[i], xlab = "β̂1 Estimate", col = "lightblue", border = "black", breaks = 20)
abline(v = beta_1, col = "red", lwd = 2, lty = 2)  # True value
abline(v = mean(beta1_df[[i]]), col = "blue", lwd = 2, lty = 3)  # Mean estimate
}
library(ggplot2)
library(gridExtra)
set.seed(2025)
M <- 100  # Number of Monte Carlo replications
n <- 100  # Sample size
beta_0 <- 400
beta_1 <- 5
beta_2 <- 200
beta_3 <- 10
sigma_u <- sqrt(5)
simulate_dgp <- function(x_star_equal = FALSE, beta2_zero = FALSE, r_prob = 0.5, beta3_value = 10) {
beta1_estimates <- matrix(NA, nrow = M, ncol = 3)  # Store β1 estimates for three regressions
colnames(beta1_estimates) <- c("Reg1", "Reg2", "Reg3")
for (m in 1:M) {
u_i <- rnorm(n, mean = 0, sd = sigma_u)
g_i <- rgamma(n, shape = 2, scale = 2)
r_i <- rbinom(n, size = 1, prob = r_prob)
if (x_star_equal) {
x_star_i <- rgamma(n, shape = 5, scale = 1)
} else {
x_star_i <- ifelse(r_i == 1, rgamma(n, shape = 3, scale = 1), rgamma(n, shape = 7, scale = 1))
}
beta_2_value <- ifelse(beta2_zero, 0, beta_2)
beta_3_value <- beta3_value
y_i <- beta_0 + beta_1 * x_star_i + beta_2_value * r_i + beta_3_value * g_i + u_i
data <- data.frame(y = y_i, x_star = x_star_i, r = r_i, g = g_i)
reg1 <- lm(y ~ x_star, data = data)
reg2 <- lm(y ~ x_star + r, data = data)
reg3 <- lm(y ~ x_star + r + g, data = data)
beta1_estimates[m, 1] <- coef(reg1)["x_star"]
beta1_estimates[m, 2] <- coef(reg2)["x_star"]
beta1_estimates[m, 3] <- coef(reg3)["x_star"]
}
return(beta1_estimates)
}
results_xstar_equal <- simulate_dgp(x_star_equal = TRUE)
results_beta2_zero <- simulate_dgp(beta2_zero = TRUE)
results_r_prob_01 <- simulate_dgp(r_prob = 0.1)
results_beta3_50 <- simulate_dgp(beta3_value = 50)
summarize_results <- function(results, scenario_name) {
data.frame(
Scenario = rep(scenario_name, 3),
Regression = c("Reg1", "Reg2", "Reg3"),
Mean = colMeans(results),
SE = apply(results, 2, sd),
Bias = colMeans(results) - 5
)
}
summary_xstar_equal <- summarize_results(results_xstar_equal, "X_star equal")
summary_beta2_zero <- summarize_results(results_beta2_zero, "Beta2 = 0")
summary_r_prob_01 <- summarize_results(results_r_prob_01, "R prob = 0.1")
summary_beta3_50 <- summarize_results(results_beta3_50, "Beta3 = 50")
summary_table <- rbind(summary_xstar_equal, summary_beta2_zero, summary_r_prob_01, summary_beta3_50)
print(summary_table)
plot_histograms <- function(results, scenario_name) {
data <- data.frame(
Estimate = c(results),
Regression = rep(c("Reg1", "Reg2", "Reg3"), each = M)
)
ggplot(data, aes(x = Estimate)) +
geom_histogram(bins = 10, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(xintercept = 5, color = "red", linewidth = 1.2) +
geom_vline(aes(xintercept = mean(Estimate)), color = "blue", linetype = "dashed", linewidth = 1.2) +
facet_wrap(~Regression, scales = "free", ncol = 3) +
labs(title = scenario_name, x = expression(hat(beta)[1]), y = "Frequency") +
theme_minimal() +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10)
)
}
plot1 <- plot_histograms(results_xstar_equal, "X_star equal")
plot2 <- plot_histograms(results_beta2_zero, "Beta2 = 0")
plot3 <- plot_histograms(results_r_prob_01, "R prob = 0.1")
plot4 <- plot_histograms(results_beta3_50, "Beta3 = 50")
grid.arrange(plot1, plot2, plot3, plot4, nrow = 4)
ggsave("Histograms_Question_d.png", grid.arrange(plot1, plot2, plot3, plot4, nrow = 4),
width = 12, height = 16, dpi = 300, units = "in")
grid.arrange(g1, g2, g3, g4, nrow = 4)
grid.arrange(plot1, plot2, plot3, plot4, nrow = 4)
plot_histograms <- function(results, scenario_name) {
data <- data.frame(
Estimate = c(results),
Regression = rep(c("Reg1", "Reg2", "Reg3"), each = M)
)
ggplot(data, aes(x = Estimate)) +
geom_histogram(bins = 10, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(xintercept = 5, color = "red", linewidth = 1.2) +
# 使用stat_summary按分组计算均值
stat_summary(aes(x = Estimate), fun = mean, geom = "vline",
xintercept = "x", color = "blue", linetype = "dashed", linewidth = 1.2) +
facet_wrap(~Regression, scales = "free", ncol = 3) +
labs(title = scenario_name, x = expression(hat(beta)[1]), y = "Frequency") +
theme_minimal() +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10)
)
}
plot1 <- plot_histograms(results_xstar_equal, "X_star equal")
plot2 <- plot_histograms(results_beta2_zero, "Beta2 = 0")
plot3 <- plot_histograms(results_r_prob_01, "R prob = 0.1")
plot4 <- plot_histograms(results_beta3_50, "Beta3 = 50")
grid.arrange(plot1, plot2, plot3, plot4, nrow = 4)
plot_histograms <- function(results, scenario_name) {
data <- data.frame(
Estimate = c(results),
Regression = rep(c("Reg1", "Reg2", "Reg3"), each = M)
)
ggplot(data, aes(x = Estimate)) +
geom_histogram(bins = 10, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(xintercept = 5, color = "red", linewidth = 1.2) +
geom_vline(aes(xintercept = Estimate), color = "blue", linetype = "dashed", linewidth = 1.2) +
facet_wrap(~Regression, scales = "free", ncol = 3) +
labs(title = scenario_name, x = expression(hat(beta)[1]), y = "Frequency") +
theme_minimal() +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10)
)
}
plot1 <- plot_histograms(results_xstar_equal, "X_star equal")
plot2 <- plot_histograms(results_beta2_zero, "Beta2 = 0")
plot3 <- plot_histograms(results_r_prob_01, "R prob = 0.1")
plot4 <- plot_histograms(results_beta3_50, "Beta3 = 50")
grid.arrange(plot1, plot2, plot3, plot4, nrow = 4)
plot_histograms <- function(results, scenario_name) {
data <- data.frame(
Estimate = c(results),
Regression = rep(c("Reg1", "Reg2", "Reg3"), each = M)
)
# 预先计算每个回归的平均值
reg_means <- aggregate(Estimate ~ Regression, data, mean)
ggplot(data, aes(x = Estimate)) +
geom_histogram(bins = 10, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(xintercept = 5, color = "red", linewidth = 1.2) +
# 使用正确的分组均值
geom_vline(data = reg_means, aes(xintercept = Estimate),
color = "blue", linetype = "dashed", linewidth = 1.2) +
facet_wrap(~Regression, scales = "free", ncol = 3) +
labs(title = scenario_name, x = expression(hat(beta)[1]), y = "Frequency") +
theme_minimal() +
theme(
strip.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10)
)
}
plot1 <- plot_histograms(results_xstar_equal, "X_star equal")
plot2 <- plot_histograms(results_beta2_zero, "Beta2 = 0")
plot3 <- plot_histograms(results_r_prob_01, "R prob = 0.1")
plot4 <- plot_histograms(results_beta3_50, "Beta3 = 50")
grid.arrange(plot1, plot2, plot3, plot4, nrow = 4)
install.packages("fixest")
library(tidyr)      # pivot_wider etc.
###############################################################
##  EMEs_replication.R   ––  R rewrite of EMEs_do.do
##  “Sovereign Debt Relief and its Aftermath”
##  Carmen M. Reinhart & Christoph Trebesch
###############################################################
## —— 0  libraries ————————————————————————————————
library(haven)      # read_dta
library(dplyr)      # data wrangling
library(data.table) # fast lag/lead within groups
library(fixest)     # FE & clustered regressions
library(tidyr)      # pivot_wider etc.
## —— 1  read the Stata file ——————————————————————
eme <- read_dta("EMEs.dta") %>%             # same file the do-file reads
mutate(across(everything(), as.vector))  # avoid labelled <dbl+lbl>
install.packages('installr')
library(installr)
updateR()
##  You can now loop through all the robustness & alternative models
##  listed in the do-file using fixest (or plm if you prefer).
##  To export into LaTeX / Word / Excel use modelsummary or
##  etable(mod_growth_brady, file = "DiD_Baker_Brady_Results.html")
library(haven)      # read_dta
library(dplyr)      # data wrangling
library(data.table) # fast lag/lead within groups
library(fixest)     # FE & clustered regressions
library(tidyr)      # pivot_wider etc.
## —— 1  read the Stata file ——————————————————————
eme <- read_dta("EMEs.dta") %>%             # same file the do-file reads
mutate(across(everything(), as.vector))
setwd("C:/Users/purga/Desktop/JEEA_final")
library(haven)      # read_dta
library(dplyr)      # data wrangling
library(data.table) # fast lag/lead within groups
library(fixest)     # FE & clustered regressions
library(tidyr)      # pivot_wider etc.
## —— 1  read the Stata file ——————————————————————
eme <- read_dta("EMEs.dta") %>%             # same file the do-file reads
mutate(across(everything(), as.vector))
## optional: keep a data.table copy for fast by-group ops
setDT(eme)                                   # convert in-place
## ------------------------------------------------------------------
## 2  DEFINE DEFAULT SPELLS & RESTRUCTURING YEARS
## ------------------------------------------------------------------
## helper tables instead of 200 repetitive replace-lines  --------------
final_restruct <- tribble(
~country, "year",
"Algeria", 1996,
"Argentina", 1993,
"Argentina", 2005,
"Bosnia and Herzegovina", 1997,
"Brazil", 1994,
"Bulgaria", 1994,
"Chile", 1990,
"Costa Rica", 1990,
"Croatia", 1996,
"Dominica", 2005,
"Dominican Republic", 1994,
"Dominican Republic", 2005,
"Ecuador", 1995,
"Ecuador", 2000,
"Ecuador", 2009,
"Gabon", 1994,
"Grenada", 2005,
"Jamaica", 1993,
"Jordan", 1993,
"Macedonia", 1997,
"Mexico", 1990,
"Panama", 1996,
"Peru", 1997,
"Poland", 1994,
"Romania", 1986,
"Russia", 2000,
"Serbia and Montenegro", 2004,
"Seychelles", 2010,
"Slovenia", 1996,
"South Africa", 1993,
"Trinidad and Tobago", 1989,
"Turkey", 1982,
"Uruguay", 1991,
"Uruguay", 2003,
"Venezuela", 1990
)
gc()
