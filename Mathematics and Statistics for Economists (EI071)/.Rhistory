install.package("installr")
install.packages("installr")
library(installr)
updateR()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("tidyverse")
install.packages(c("backports", "bda", "brio", "broom", "bslib", "cachem", "callr", "data.table", "digest", "farver", "fastmap", "fs", "ggplot2", "glue", "gtable", "Hmisc", "htmltools", "KernSmooth", "lavaan", "lme4", "minqa", "munsell", "mvtnorm", "nlme", "pkgbuild", "pkgload", "processx", "ps", "psych", "quantreg", "Rcpp", "RcppEigen", "rlang", "rmarkdown", "rstudioapi", "sass", "SparseM", "stringi", "survival", "testthat", "tidyr", "tinytex", "viridis", "withr"))
y
clear
clc
install.packages("IRkernel")
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
install.packages('knitr')
library(knitr)
?knit
knit(input)
sessioninfo()
sessionInfo()
rm(list-ls())
cat("\f")
?cat
a = 3
a <- 3
assign("a", 3)
show(a)
print(a)
rm(a)
install.packages(c("microbenchmark", "mvtnorm"))
isAlargerB = a>b
a = 3
b = 8
isAlargerB = a>b
typeof(isAlargerB)
a=b
a = 3
b = 8
isAlargerB = a>b
typeof(isAlargerB)
a=b
a = 3
b = 8
isAlargerB = a>b
typeof(isAlargerB)
a<b
a = 3
b = 8
isAlargerB = a>b
typeof(isAlargerB)
a<b
a>=b
a==b
a!=b
a!=b
isAlargerB = 0
isXtrue = TRUE
isYtrue = FALSE
isXnottrue = !isXtrue
isYnottrue = !isYtrue
areBothTrue = isXtrue & isYtrue
isEitherTrue = isXtrue | isYtrue
isExactlyOneTrue = xor(isXtrue, isYtrue)
fMultiplyxy = function(x, y){
return(x*y)
}
fMultiplyxy = function(x, y){
return(x*y)
}
fMultiplyxy(3, 8)
fMultiplyxy(x=3, y=8)
v_x = c(1, 2, 3, 4, 5)
vx = 1:3
show(vx)
t(vx)
c(vx, vy)
c(vx, v——y)
c(vx, v_y)
v_y = c(6, 7, 8, 9, 10)
c(vx, v_y)
seq(-4, 4, by=0.8)
rep(1, 5)
rev(v_x)
vx = c(TRUE,FALSE)
vx = (1,2 3)
vy = (1,3, )
vy = (1,3,3)
vx = c(1,2 3)
vy = c(1,3,3)
vx = c(1,2,3)
vy = c(1,3,3)
vx+vy
vy/3
vx*vy
vx%*%t(vy)
t(vx)%*%vy
knitr::opts_chunk$set(echo = TRUE)
min(vx)
max(vx)
prod(vx)
var(vx)
sd(vx)
mean(vx)
cor(vx, vy)
vx = (1,2,NA,2,3)
vx = c(1,2,NA,2,3)
mean(vx)
mean(vx, na.rm=TRUE)
vy = c(1,3,3)
vy[-2]
vy[c(1,3)]
vy[-c(1,3)]
vy[c(FALSE,TRUE,FALSE)]
vy[c(1,3)]
vy[-c(1,3)]
vy[c(FALSE, TRUE, FALSE)]
vy[vy>=2]
names(vy) = c("a", "b", "c"))
names(vy) = c("a", "b", "c")
vy["a"]
vy["b"]
vy["c"]
vy[c("a", "c")=c(6, 7)]
vy[c("a", "c")]=c(6, 7)
which.min(vy)
which(vy==3)
sort(vy)
order(vy)
sort(vy,decreasing=TRUE)
vx = c(1,3,4,2)
vy = c(1,3,5)
vx+vy
cor(vx,vy)
matrix(1:6, nrow=2, ncol=3)
matrix(c(1,4,3,7,8,6), nrow=2, ncol=3)
matrix(c(1,4,3,7,8,6), nrow=2, ncol=3, byrow=TRUE)
diag(3)
diag(c(3,2))
mA = matrix(1:6, nrow=2, ncol=3)
View(mA)
diag(mA))
diag(mA)
mA = matrix(c(1,3,8,8), nrow=2, ncol=3)
mA = matrix(c(1,3,8,8), nrow=2, ncol=2)
mB = matrix(c(1,2,7,1), nrow=2, ncol=2)
mA*mB
mA%*%mB
mA+mB
t(mA)
solve(mA)
?solve
rankMatrix(mA)
rank(mA)
rank(mA%)
?rank
qr(mA)$rank
qr(mA)$eigen
eigen(mA)
eigen(mA)$values
eigen(mA)$vectors
apply(mA, 2, mean)
apply(mA, 1, mean)
aX = 1:12
dim(aX) = c(2,3,2)
show(aX)
ax[1,3,2]
aX[1,3,2]
a = 5
print("a is 2")
if (a==2){
print("a is 2")
}
if (a==2){
print("a is 2")
} else if (a==3){
print("a is 3")
} else {
print("a is not 2 or 3")
}
if (a==2){
print("a is 2")
} else if (a==3){
print("a is 3")
} else {
print("a is not 2 or 3")
}
a = 2
if (a==2){
print("a is 2")
} else if (a==3){
print("a is 3")
} else {
print("a is not 2 or 3")
}
a = 4
if (a==2){
print("a is 2")
} else if (a==3){
print("a is 3")
} else {
print("a is not 2 or 3")
}
a = 0
for (i in 1:5){
a = a + i
}
print(a)
while (a<10){
a = a + 1
}
print(a)
a = 0
while (a<10){
a = a + 1
}
print(a)
a = 0
for (i in 1:10){
if (i%2 == 0){
a = 0
for (i in 1:10){
if (i%%2 == 0){
next
}
a = a + i
}
print(a)
while (a<130){
a = a + 3
print(a)
if (a == 88 | a == 89){
break
}
}
a = "banana"
typeof(a)
length(a)
nchar(a)
substr(a, 1, 3)
paste("I have", 3, "apples")
as.character(3)
format(3, digits=2)
format(3, nsmall=2)
paste("mouse=", 3)
strsplit("Mississippi", "i")
gsub("i", "o", "Mississippi")
library("lubridate")
year(today())
newdate = as.Date("2018-01-01", format="%d-%m-%Y")
newdate
newdate = as.Date("01-01-2018", format="%d-%m-%Y")
newdate
newdate + years(1)
MyList = list(1, "a", c(1,2,3))
View(MyList)
View(MyList)
MyList[3]
MyList = append(MyList, "b")
View(MyList)
data(mtcars)
force(mtcars)
ncol(mtcars)
nrow(mtcars)
summary(mtcars)
vISHPhigh = mtcars$hp > mean(mtcars$hp)
vIsHPhigh = mtcars$hp > mean(mtcars$hp)
sum(vIsHPhigh)
mtcas[vIsHPhigh,]
mtcars[vIsHPhigh,]
nrow(mtcars[vIsHPhigh,])
mtcars[order(mtcars$cy,mtcars$hp),]
mtcars[order(mtcars$cyl,mtcars$hp),]
clear
df1 = data.frame("Zim","Cam","Rwa","Uga", year=rep(2018,4), data=(1:4))
View(df1)
View(df1)
df1 = data.frame(country=("Zim","Cam","Rwa","Uga"), year=rep(2018,4), data=(1:4))
df1 = data.frame(country=c("Zim","Cam","Rwa","Uga"), year=rep(2018,4), data=(1:4))
View(df1)
df2 = cbind(df1, outcome2=(1,0,0,1))
df2 = cbind(df1, outcome2=c(1,0,0,1))
View(df2)
df3 = subset(df2, select=-c(outcome2))
View(df3)
View(df2)
View(df3)
df1 = rbind(df1, list("Ken", 2018, 5))
View(df1)
df1 = df1[df1$country!="Rwa"]
df1 = df1[df1$country!="Rwa"]]
df1 = df1[df1$country!="Rwa",]]
df1 = df1[df1$country!="Rwa",]
FuncOpt = function(v){
(v-3)^2
}
o = optimise(FuncOpt, interval = c(-10, 10))
o
View(o)
#1.1
data(mtcars)
#1.2
ncol(mtcars)
nrow(mtcars)
#1.3
library(dplyr)
selected_data <- select(mtcars, mpg, cyl, hp)
#1.4
data1_4 <- filter(mtcars, cyl == 6, hp > 100)
#1.5
mtcars$hp_per_cyl <- mtcars$hp / mtcars$cyl
#1.6
average_mpg <- mtcars %>%
group_by(cyl) %>%
summarize(avg_mpg = mean(mpg))
#2.1
library(ggplot2)
ggplot(mtcars, aes(x = hp, y = mpg, color = as.factor(cyl))) +
geom_point() +
labs(color = "Number of Cylinders")
#2.2
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg, fill = as.factor(cyl))) +
geom_boxplot() +
scale_fill_discrete(name = "Number of Cylinders") +
labs(x = "Number of Cylinders", y = "Miles Per Gallon")
#2.3
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(binwidth = 2) +
xlab("Miles Per Gallon") +
ylab("Frequency")
#3.1
mean_mpg <- mean(mtcars$mpg)
mean_hp <- mean(mtcars$hp)
#3.2
var_mpg <- var(mtcars$mpg)
var_hp <- var(mtcars$hp)
#3.3
cov_mpg_hp <- cov(mtcars$mpg, mtcars$hp)
#3.4
cor_mpg_hp <- cor(mtcars$mpg, mtcars$hp)
#4.1
car_names <- data.frame(
car_model = rownames(mtcars),
origin = c(rep('USA', 10), rep('Europe', 10), rep('Japan', 12))
)
mtcars$car_model <- rownames(mtcars)
merged_data <- merge(mtcars, car_names, by = "car_model")
#4.2
library(tidyr)
long_format <- pivot_longer(mtcars, cols = -car_model, names_to = "variable", values_to = "value")
#4.3
short_format <- pivot_wider(long_format, names_from = variable, values_from = value, id_cols = car_model)
#5.1
library(stargazer)
model <- lm(mpg ~ hp + wt, data = mtcars)
model
stargazer(model, type = "latex")
#5.2
summary(model)
stargazer(model, type = "latex", out = "PS3-5_2.tex", title = "Regression Results", single.row = FALSE, header = FALSE, no.space = TRUE)
#5.3
predict_mpg <- predict(model, newdata = data.frame(hp = 150, wt = 3.0))
predict_mpg
rm(list=ls())
cat("\f")
data(mtcars)
#1.1 Load the ”mtcars” dataset.
#1.2 Find out how many observations and how many variables are in the dataset.
ncol(mtcars)
nrow(mtcars)
summary(mtcars)
#1.3 Use the ”select()” function from ”dplyr” package to select the columns mpg, cyl, and hp from the mtcars dataset.
install.packages("dplyr")
library(dplyr)
mtcars %>% select('mpg', 'cyl', 'hp')
#1.4 Keep only the rows where the number of cylinders (cyl) is 6 and horsepower (hp) is greater than 100 from the mtcars dataset.
mtcars %>% filter(cyl == 6, hp > 100)
rm(list=ls())
cat("\f")
data(mtcars)
#1.1 Load the ”mtcars” dataset.
#1.2 Find out how many observations and how many variables are in the dataset.
ncol(mtcars)
nrow(mtcars)
summary(mtcars)
#1.3 Use the ”select()” function from ”dplyr” package to select the columns mpg, cyl, and hp from the mtcars dataset.
install.packages("dplyr")
library(dplyr)
mtcars %>% select('mpg', 'cyl', 'hp')
#1.4 Keep only the rows where the number of cylinders (cyl) is 6 and horsepower (hp) is greater than 100 from the mtcars dataset.
mtcars %>% filter(cyl == 6, hp > 100)
rm(list=ls())
cat("\f")
data(mtcars)
#1.1 Load the ”mtcars” dataset.
#1.2 Find out how many observations and how many variables are in the dataset.
ncol(mtcars)
nrow(mtcars)
summary(mtcars)
#1.3 Use the ”select()” function from ”dplyr” package to select the columns mpg, cyl, and hp from the mtcars dataset.
install.packages("dplyr")
library(dplyr)
mtcars %>% select('mpg', 'cyl', 'hp')
#1.4 Keep only the rows where the number of cylinders (cyl) is 6 and horsepower (hp) is greater than 100 from the mtcars dataset.
mtcars %>% filter(cyl == 6, hp > 100)
install.packages("dplyr")
#1.1
data(mtcars)
#1.2
ncol(mtcars)
nrow(mtcars)
#1.3
library(dplyr)
selected_data <- select(mtcars, mpg, cyl, hp)
mtcars %>% select('mpg', 'cyl', 'hp')
#1.4
data1_4 <- filter(mtcars, cyl == 6, hp > 100)
mtcars %>% filter(cyl == 6, hp > 100)
#1.5
mtcars$hp_per_cyl <- mtcars$hp / mtcars$cyl
#1.6
average_mpg <- mtcars %>%
group_by(cyl) %>%
summarize(avg_mpg = mean(mpg))
#2.1
library(ggplot2)
ggplot(mtcars, aes(x = hp, y = mpg, color = as.factor(cyl))) +
geom_point() +
labs(color = "Number of Cylinders")
#2.2
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg, fill = as.factor(cyl))) +
geom_boxplot() +
scale_fill_discrete(name = "Number of Cylinders") +
labs(x = "Number of Cylinders", y = "Miles Per Gallon")
#2.3
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(binwidth = 2) +
xlab("Miles Per Gallon") +
ylab("Frequency")
#3.1
mean_mpg <- mean(mtcars$mpg)
mean_hp <- mean(mtcars$hp)
#3.2
var_mpg <- var(mtcars$mpg)
var_hp <- var(mtcars$hp)
#3.3
cov_mpg_hp <- cov(mtcars$mpg, mtcars$hp)
#3.4
cor_mpg_hp <- cor(mtcars$mpg, mtcars$hp)
#4.1
car_names <- data.frame(
car_model = rownames(mtcars),
origin = c(rep('USA', 10), rep('Europe', 10), rep('Japan', 12))
)
mtcars$car_model <- rownames(mtcars)
merged_data <- merge(mtcars, car_names, by = "car_model")
#4.2
library(tidyr)
long_format <- pivot_longer(mtcars, cols = -car_model, names_to = "variable", values_to = "value")
#4.3
short_format <- pivot_wider(long_format, names_from = variable, values_from = value, id_cols = car_model)
#5.1
library(stargazer)
model <- lm(mpg ~ hp + wt, data = mtcars)
#5.2
summary(model)
stargazer(model, type = "latex", out = "PS3-5_2.tex", title = "Regression Results", single.row = TRUE, header = FALSE, no.space = TRUE)
#5.3
predict_mpg <- predict(model, newdata = data.frame(hp = 150, wt = 3.0))
predict_mpg
library(knitr)
setwd("E:/IHEID国际经济学硕士/2024Fall/Mathematics and Statistics for Economists (EI071)")
knitr("E:/IHEID国际经济学硕士/2024Fall/Mathematics and Statistics for Economists (EI071)/PS3.Rnw")
knit("E:/IHEID国际经济学硕士/2024Fall/Mathematics and Statistics for Economists (EI071)/PS3.Rnw")
