analytical_Cx[1], analytical_Cx[2]))
rm(list = ls())
# Set the random seed for reproducibility
set.seed(42)
# Given data
x <- c(178, 161, 168, 172)
n <- length(x)
sigma_squared <- 6
sigma <- sqrt(sigma_squared)
alpha <- 0.05
M <- 1000  # Number of simulations
# Grid of θ₀ values
T_values <- seq(160, 180, by = 0.1)
vc <- numeric(length(T_values))
for (i in seq_along(T_values)) {
theta_0 <- T_values[i]
# Step 1: Simulate c_alpha(θ₀)
T_m <- numeric(M)
for (m in 1:M) {
# Simulate data under H₀: θ = θ₀
x_m <- rnorm(n, mean = theta_0, sd = sigma)
# Compute T(x^m; θ₀)
T_m_value <- (n / sigma_squared) * (mean(x_m) - theta_0)^2
T_m[m] <- T_m_value
}
# Determine c_alpha(θ₀) as the 95th percentile
T_m_sorted <- sort(T_m)
c_alpha_theta_index <- ceiling(M * (1 - alpha))
c_alpha_theta <- T_m_sorted[c_alpha_theta_index]
# Step 2: Compute T(x; θ₀) for the actual data
x_bar <- mean(x)
T_x_theta <- (n / sigma_squared) * (x_bar - theta_0)^2
# Record 1 if θ₀ ∈ C(x), else 0
if (T_x_theta < c_alpha_theta) {
vc[i] <- 1
} else {
vc[i] <- 0
}
}
theta_in_Cx <- T_values[vc == 1]
if (length(theta_in_Cx) > 0) {
numerical_Cx <- c(min(theta_in_Cx), max(theta_in_Cx))
cat(sprintf("Numerical Confidence Interval C(x): [%.2f, %.2f]\n",
numerical_Cx[1], numerical_Cx[2]))
} else {
cat("No values of θ₀ are included in the numerical confidence interval C(x).\n")
}
# Plotting C(x)
plot(T_values, vc, type = "p", col = "blue", pch = 16,
main = "Numerical Confidence Interval C(x)",
xlab = expression(theta[0] ~ "values"),
ylab = "Indicator")
grid()
# Analytical Confidence Interval for comparison
c_alpha <- qchisq(1 - alpha, df = 1)
margin <- sqrt((c_alpha * sigma_squared) / n)
analytical_Cx <- c(x_bar - margin, x_bar + margin)
# Add analytical confidence interval boundaries to the plot
abline(v = analytical_Cx[1], col = 'red', lty = 2, lwd = 2)
abline(v = analytical_Cx[2], col = 'green', lty = 2, lwd = 2)
cat(sprintf("Numerical C(x): [%.2f, %.2f]\n", numerical_Cx[1], numerical_Cx[2]))
cat(sprintf("Analytical C(x): [%.2f, %.2f]\n",
analytical_Cx[1], analytical_Cx[2]))
rm(list = ls()
set.seed(2024)
rm(list = ls())
set.seed(2024)
M <- 1000  # number of simulations
n <- 4     # sample size
theta_0 <- 175  # Null hypothesis mean
sigma_sq <- 6  # Variance (sigma^2)
# Initialize a vector to store the test statistics
T_values <- numeric(M)
# Function to calculate the test statistic T(X)
compute_T_stat <- function(x, theta_0, sigma_sq, n) {
T_x <- n * (mean(x) - theta_0)^2 / sigma_sq
return(T_x)
}
# Simulation loop
for (m in 1:M) {
# Sample of size n from N(theta_0, sigma^2)
sample_x <- rnorm(n, mean = theta_0, sd = sqrt(sigma_sq))
# Test statistic for this sample
T_values[m] <- compute_T_stat(sample_x, theta_0, sigma_sq, n)
}
# Histogram of the test statistics
hist(T_values, breaks = 30, main = "Histogram of Test Statistic T(X)",
xlab = "T(X)", col = "skyblue", border = "black")
#2
alpha <- 0.05 # Significance level of alpha
# Sort the test statistics T_values in ascending order
sorted_T_values <- sort(T_values)
quantile_index <- floor(M * (1 - alpha))
c_alpha <- sorted_T_values[quantile_index]
cat("The numerical approximation of the critical value c_alpha is:", c_alpha, "\n")
rm(list=ls())
set.seed(2024)
M <- 1000
n <- 4
sigma_sq <- 6
x <- c(178, 161, 168, 172)
alpha <- 0.05
# Fix a grid of T for theta_0
T_grid <- seq(160, 180, by = 0.1)
# create a vector vc of the same dimension as T
vc <- numeric(length(T_grid))
# 1
# Set theta_0
for (i in seq_along(T_grid)) {
theta_0 <- T_grid[i]
T_values <- numeric(M)
compute_T_stat <- function(x, theta_0, sigma_sq, n) {
T_x <- n * (mean(x) - theta_0)^2 / sigma_sq
return(T_x)
}
# Simulation loop
for (m in 1:M) {
sample_x <- rnorm(n, mean = theta_0, sd = sqrt(sigma_sq))
# Test statistic for this sample
T_values[m] <- compute_T_stat(sample_x, theta_0, sigma_sq, n)
}
sorted_T_values <- sort(T_values)
quantile_index <- floor(M * (1 - alpha))
c_alpha <- sorted_T_values[quantile_index]
# 2
# Define theta_hat
theta_hat <- mean(x)
# Define T_theta_0
T_theta_0 <- (n/sigma_sq) * (theta_0 - theta_hat)^2
# Verification for theta_0 in confidence interval or not
if (T_theta_0 < c_alpha) {
vc[i] <-1
} else {
vc[i] <-0
}
}
# Confidence interval C(x)
plot(T_grid, vc, main = "Confidence interval C(x)",
xlab = "T(X)", type='p', col = "skyblue", pch = 16)
# Analytical Confidence Interval for comparison
c_alpha <- qchisq(1 - alpha, df = 1)
margin <- sqrt((c_alpha * sigma_sq) / n)
analytical_Cx <- c(theta_hat - margin, theta_hat + margin)
cat(sprintf("Analytical Confidence Interval: [%.2f, %.2f]\n",
analytical_Cx[1], analytical_Cx[2]))
rm(list=ls())
set.seed(2024)
M <- 1000
n <- 4
sigma_sq <- 6
x <- c(178, 161, 168, 172)
alpha <- 0.05
# Fix a grid of T for theta_0
T_grid <- seq(160, 180, by = 0.1)
# create a vector vc of the same dimension as T
vc <- numeric(length(T_grid))
# 1
# Set theta_0
for (i in seq_along(T_grid)) {
theta_0 <- T_grid[i]
T_values <- numeric(M)
compute_T_stat <- function(x, theta_0, sigma_sq, n) {
T_x <- n * (mean(x) - theta_0)^2 / sigma_sq
return(T_x)
}
# Simulation loop
for (m in 1:M) {
sample_x <- rnorm(n, mean = theta_0, sd = sqrt(sigma_sq))
# Test statistic for this sample
T_values[m] <- compute_T_stat(sample_x, theta_0, sigma_sq, n)
}
sorted_T_values <- sort(T_values)
quantile_index <- floor(M * (1 - alpha))
c_alpha <- sorted_T_values[quantile_index]
# 2
# Define theta_hat
theta_hat <- mean(x)
# Define T_theta_0
T_theta_0 <- (n/sigma_sq) * (theta_0 - theta_hat)^2
# Verification for theta_0 in confidence interval or not
if (T_theta_0 < c_alpha) {
vc[i] <-1
} else {
vc[i] <-0
}
}
# Confidence interval C(x)
plot(T_grid, vc, main = "Confidence interval C(x)",
xlab = "T(X)", type='p', col = "skyblue", pch = 16)
# Analytical Confidence Interval for comparison
c_alpha <- qchisq(1 - alpha, df = 1)
margin <- sqrt((c_alpha * sigma_sq) / n)
analytical_Cx <- c(theta_hat - margin, theta_hat + margin)
theta_in_Cx <- T_values[vc == 1]
if (length(theta_in_Cx) > 0) {
numerical_Cx <- c(min(theta_in_Cx), max(theta_in_Cx))
cat(sprintf("Numerical Confidence Interval C(x): [%.2f, %.2f]\n",
numerical_Cx[1], numerical_Cx[2]))
} else {
cat("No values of θ₀ are included in the numerical confidence interval C(x).\n")
}
cat(sprintf("Analytical Confidence Interval: [%.2f, %.2f]\n",
analytical_Cx[1], analytical_Cx[2]))
rm(list=ls())
set.seed(2024)
M <- 1000
n <- 4
sigma_sq <- 6
x <- c(178, 161, 168, 172)
alpha <- 0.05
# Fix a grid of T for theta_0
T_grid <- seq(160, 180, by = 0.1)
# create a vector vc of the same dimension as T
vc <- numeric(length(T_grid))
theta_in_Cx <- c()
# 1
# Set theta_0
for (i in seq_along(T_grid)) {
theta_0 <- T_grid[i]
T_values <- numeric(M)
compute_T_stat <- function(x, theta_0, sigma_sq, n) {
T_x <- n * (mean(x) - theta_0)^2 / sigma_sq
return(T_x)
}
# Simulation loop
for (m in 1:M) {
sample_x <- rnorm(n, mean = theta_0, sd = sqrt(sigma_sq))
# Test statistic for this sample
T_values[m] <- compute_T_stat(sample_x, theta_0, sigma_sq, n)
}
sorted_T_values <- sort(T_values)
quantile_index <- floor(M * (1 - alpha))
c_alpha <- sorted_T_values[quantile_index]
# 2
# Define theta_hat
theta_hat <- mean(x)
# Define T_theta_0
T_theta_0 <- (n/sigma_sq) * (theta_0 - theta_hat)^2
# Verification for theta_0 in confidence interval or not
if (T_theta_0 < c_alpha) {
vc[i] <-1
theta_in_Cx <- c(theta_in_Cx, theta_0)
} else {
vc[i] <-0
}
}
# Confidence interval C(x)
plot(T_grid, vc, main = "Confidence interval C(x)",
xlab = "T(X)", type='p', col = "skyblue", pch = 16)
if (length(theta_in_Cx) > 0) {
numerical_Cx <- c(min(theta_in_Cx), max(theta_in_Cx))
cat(sprintf("Numerical Confidence Interval C(x): [%.2f, %.2f]\n",
numerical_Cx[1], numerical_Cx[2]))
}
# Analytical Confidence Interval for comparison
c_alpha <- qchisq(1 - alpha, df = 1)
margin <- sqrt((c_alpha * sigma_sq) / n)
analytical_Cx <- c(theta_hat - margin, theta_hat + margin)
cat(sprintf("Analytical Confidence Interval: [%.2f, %.2f]\n",
analytical_Cx[1], analytical_Cx[2]))
rm(list=ls())
set.seed(2024)
M <- 1000
n <- 4
sigma_sq <- 6
x <- c(178, 161, 168, 172)
alpha <- 0.05
# Fix a grid of T for theta_0
T_grid <- seq(160, 180, by = 0.1)
# create a vector vc of the same dimension as T
vc <- numeric(length(T_grid))
theta_in_Cx <- c()
# 1
# Set theta_0
for (i in seq_along(T_grid)) {
theta_0 <- T_grid[i]
T_values <- numeric(M)
compute_T_stat <- function(x, theta_0, sigma_sq, n) {
T_x <- n * (mean(x) - theta_0)^2 / sigma_sq
return(T_x)
}
# Simulation loop
for (m in 1:M) {
sample_x <- rnorm(n, mean = theta_0, sd = sqrt(sigma_sq))
# Test statistic for this sample
T_values[m] <- compute_T_stat(sample_x, theta_0, sigma_sq, n)
}
sorted_T_values <- sort(T_values)
quantile_index <- floor(M * (1 - alpha))
c_alpha <- sorted_T_values[quantile_index]
# 2
# Define theta_hat
theta_hat <- mean(x)
# Define T_theta_0
T_theta_0 <- (n/sigma_sq) * (theta_0 - theta_hat)^2
# Verification for theta_0 in confidence interval or not
if (T_theta_0 < c_alpha) {
vc[i] <-1
theta_in_Cx <- c(theta_in_Cx, theta_0)
} else {
vc[i] <-0
}
}
# Confidence interval C(x)
plot(T_grid, vc, main = "Confidence interval C(x)",
xlab = "T(X)", type='p', col = "skyblue", pch = 16)
if (length(theta_in_Cx) > 0) {
numerical_Cx <- c(min(theta_in_Cx), max(theta_in_Cx))
cat(sprintf("Numerical Confidence Interval C(x): [%.2f, %.2f]\n",
numerical_Cx[1], numerical_Cx[2]))
}
# Analytical Confidence Interval for comparison
c_alpha <- qchisq(1 - alpha, df = 1)
margin <- sqrt((c_alpha * sigma_sq) / n)
analytical_Cx <- c(theta_hat - margin, theta_hat + margin)
cat(sprintf("Analytical Confidence Interval: [%.2f, %.2f]\n",
analytical_Cx[1], analytical_Cx[2]))
rm(list=ls())
set.seed(2024)
M <- 1000
n <- 4
sigma_sq <- 6
x <- c(178, 161, 168, 172)
alpha <- 0.05
# Fix a grid of T for theta_0
T_grid <- seq(160, 180, by = 0.1)
# create a vector vc of the same dimension as T
vc <- numeric(length(T_grid))
theta_in_Cx <- c()
# 1
# Set theta_0
for (i in seq_along(T_grid)) {
theta_0 <- T_grid[i]
T_values <- numeric(M)
compute_T_stat <- function(x, theta_0, sigma_sq, n) {
T_x <- n * (mean(x) - theta_0)^2 / sigma_sq
return(T_x)
}
# Simulation loop
for (m in 1:M) {
sample_x <- rnorm(n, mean = theta_0, sd = sqrt(sigma_sq))
# Test statistic for this sample
T_values[m] <- compute_T_stat(sample_x, theta_0, sigma_sq, n)
}
sorted_T_values <- sort(T_values)
quantile_index <- floor(M * (1 - alpha))
c_alpha <- sorted_T_values[quantile_index]
# 2
# Define theta_hat
theta_hat <- mean(x)
# Define T_theta_0
T_theta_0 <- (n/sigma_sq) * (theta_0 - theta_hat)^2
# Verification for theta_0 in confidence interval or not
if (T_theta_0 < c_alpha) {
vc[i] <-1
theta_in_Cx <- c(theta_in_Cx, theta_0)
} else {
vc[i] <-0
}
}
# Confidence interval C(x)
plot(T_grid, vc, main = "Confidence interval C(x)",
xlab = "T(X)", type='p', col = "skyblue", pch = 16)
if (length(theta_in_Cx) > 0) {
numerical_Cx <- c(min(theta_in_Cx), max(theta_in_Cx))
cat(sprintf("Numerical Confidence Interval: [%.2f, %.2f]\n",
numerical_Cx[1], numerical_Cx[2]))
}
# Analytical Confidence Interval for comparison
c_alpha <- qchisq(1 - alpha, df = 1)
margin <- sqrt((c_alpha * sigma_sq) / n)
analytical_Cx <- c(theta_hat - margin, theta_hat + margin)
cat(sprintf("Analytical Confidence Interval: [%.2f, %.2f]\n",
analytical_Cx[1], analytical_Cx[2]))
gc()
rm(list = ls())
# Set the random seed for reproducibility
set.seed(2024)
# Given parameters
theta_0 <- 175
sigma_squared <- 6
sigma <- sqrt(sigma_squared)
n <- 4
alpha <- 0.05
M <- 1000  # Number of simulations
# Initialize a vector to store the test statistics
T_values <- numeric(M)
# Simulation loop
for (m in 1:M) {
# Draw a sample under H0: theta = theta_0
x_m <- rnorm(n, mean = theta_0, sd = sigma)
# Compute the sample mean
x_bar_m <- mean(x_m)
# Compute the test statistic T(x^m)
T_m <- (n / sigma_squared) * (x_bar_m - theta_0)^2
# Store the test statistic
T_values[m] <- T_m
}
# Plot the histogram of T_values
hist(T_values, breaks = 30, col = 'skyblue', border = 'black', freq = TRUE,
main = 'Histogram of T(X) under H0', xlab = 'Test Statistic T(X)')
grid()
# Sort the test statistics and find the critical value c_alpha
T_values_sorted <- sort(T_values)
c_alpha_index <- ceiling(M * (1 - alpha))
c_alpha <- T_values_sorted[c_alpha_index]
cat(sprintf('Numerical approximation of c_alpha: %.4f\n', c_alpha))
# Analytical critical value
c_alpha_analytical <- qchisq(1 - alpha, df = 1)
cat(sprintf('Analytical c_alpha from chi-squared distribution: %.4f\n', c_alpha_analytical))
# Compare the numerical and analytical critical values
difference <- abs(c_alpha - c_alpha_analytical)
cat(sprintf('Difference between numerical and analytical c_alpha: %.4f\n', difference))
rm(list = ls())
# Set the random seed for reproducibility
set.seed(42)
# Given data
x <- c(178, 161, 168, 172)
n <- length(x)
sigma_squared <- 6
sigma <- sqrt(sigma_squared)
alpha <- 0.05
M <- 1000  # Number of simulations
# Grid of θ₀ values
T_values <- seq(160, 180, by = 0.1)
vc <- numeric(length(T_values))
for (i in seq_along(T_values)) {
theta_0 <- T_values[i]
# Step 1: Simulate c_alpha(θ₀)
T_m <- numeric(M)
for (m in 1:M) {
# Simulate data under H₀: θ = θ₀
x_m <- rnorm(n, mean = theta_0, sd = sigma)
# Compute T(x^m; θ₀)
T_m_value <- (n / sigma_squared) * (mean(x_m) - theta_0)^2
T_m[m] <- T_m_value
}
# Determine c_alpha(θ₀) as the 95th percentile
T_m_sorted <- sort(T_m)
c_alpha_theta_index <- ceiling(M * (1 - alpha))
c_alpha_theta <- T_m_sorted[c_alpha_theta_index]
# Step 2: Compute T(x; θ₀) for the actual data
x_bar <- mean(x)
T_x_theta <- (n / sigma_squared) * (x_bar - theta_0)^2
# Record 1 if θ₀ ∈ C(x), else 0
if (T_x_theta < c_alpha_theta) {
vc[i] <- 1
} else {
vc[i] <- 0
}
}
theta_in_Cx <- T_values[vc == 1]
if (length(theta_in_Cx) > 0) {
numerical_Cx <- c(min(theta_in_Cx), max(theta_in_Cx))
cat(sprintf("Numerical Confidence Interval C(x): [%.2f, %.2f]\n",
numerical_Cx[1], numerical_Cx[2]))
} else {
cat("No values of θ₀ are included in the numerical confidence interval C(x).\n")
}
# Plotting C(x)
plot(T_values, vc, type = "p", col = "blue", pch = 16,
main = "Numerical Confidence Interval C(x)",
xlab = expression(theta[0] ~ "values"),
ylab = "Indicator")
grid()
# Analytical Confidence Interval for comparison
c_alpha <- qchisq(1 - alpha, df = 1)
margin <- sqrt((c_alpha * sigma_squared) / n)
analytical_Cx <- c(x_bar - margin, x_bar + margin)
# Add analytical confidence interval boundaries to the plot
abline(v = analytical_Cx[1], col = 'red', lty = 2, lwd = 2)
abline(v = analytical_Cx[2], col = 'green', lty = 2, lwd = 2)
cat(sprintf("Numerical C(x): [%.2f, %.2f]\n", numerical_Cx[1], numerical_Cx[2]))
cat(sprintf("Analytical C(x): [%.2f, %.2f]\n",
analytical_Cx[1], analytical_Cx[2]))
setwd("E:/IHEID国际经济学硕士/2024Fall/Econometrics I/Problem Sets")
rm(list = ls())
library(tidyverse)
library(ggplot2)
library(dplyr)
library(broom)
library(stats)
library(stargazer)
# Load the data
dat <- read.csv("dat_CPS08.csv")
dat <- dat %>%
mutate(age2 = age^2)
dat$female_age <- dat$female * dat$age
dat$female_age2 <- dat$female * dat$age2
interaction_formula <- log(ahe) ~ age + I(age^2) + female + bachelor + female_age + female_age2
interaction_model <- lm(interaction_formula, data=dat)
summary(interaction_model)
library(lmtest)
f_test_result <- linearHypothesis(model2, c("female_age = 0", "female_age2 = 0"))
library(car)
f_test_result <- linearHypothesis(model2, c("female_age = 0", "female_age2 = 0"))
f_test_result <- linearHypothesis(interaction_formula, c("female_age = 0", "female_age2 = 0"))
anova(interaction_model)
sse_full <- sum(residuals(interaction_model)^2)
sse_reduced <- sum(lm(log(ahe) ~ age + I(age^2) + female + bachelor, data=dat)$residuals^2)
df_full <- nrow(dat) - length(coef(interaction_model))
df_reduced <- nrow(dat) - length(coef(lm(log(ahe) ~ age + I(age^2) + female + bachelor, data=dat)))
f_stat <- ((sse_reduced - sse_full) / (df_reduced - df_full)) / (sse_full / df_full)
pvalue <- 1 - pf(f_stat, df_reduced - df_full, df_full)
print(paste0("F-statistic: ", f_stat))
print(paste0("P-value: ", pvalue))
Anova(interaction_model, type="III")
waldtest(interaction_model, lm(log(ahe) ~ age + I(age^2) + female + bachelor, data=dat), test="F")
wald_test_result <- waldtest(interaction_model, lm(log(ahe) ~ age + I(age^2) + female + bachelor, data=dat), test="F")
library(xtable)
print(xtable(wald_test_result), type = "latex")
print(xtable(wald_test_result), type = "latex", file = "wald_test.tex")
